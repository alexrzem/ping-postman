{
	"info": {
		"_postman_id": "f5d9beb5-a917-4a3d-9d25-03df0aca75c1",
		"name": "PingOne Use Case:  Use two MFA Actions to Authenticate Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Step 1: Create a web application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"webApp4MfaId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"enabled\": true,\n    \"name\": \"WebAppWithMFA_{{$timestamp}}\",\n    \"description\": \"This is an OIDC Web application.\",\n    \"type\": \"WEB_APP\",\n    \"protocol\": \"OPENID_CONNECT\",\n    \"grantTypes\": [\n        \"AUTHORIZATION_CODE\"\n    ],\n    \"redirectUris\": [\n        \"https://www.google.com\"\n    ],\n    \"responseTypes\": [\n        \"CODE\"\n    ],\n    \"tokenEndpointAuthMethod\": \"CLIENT_SECRET_BASIC\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/applications",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 2: Get all resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"const resList = jsonData._embedded.resources;",
							"",
							"pm.test(\"Response body JSON's _embedded:resources is an array of objs w/ IDs\", function () {",
							"  pm.expect(resList).to.be.an('array');",
							"  if (resList.length > 0) {",
							"    console.log(\"Found \" + resList.length + \" resource(s)\")",
							"    resList.forEach((elem) => {",
							"      pm.expect(elem.id).to.be.a('string');",
							"    });",
							"    pm.environment.set(\"resID\", resList[0].id);",
							"    console.log(\"resID is now: \" + pm.environment.get(\"resID\"));",
							"  } else {",
							"    console.log(\"No resources!\");",
							"  }",
							"});",
							"",
							"pm.test(\"Response body JSON's _embedded:resources has the default resources for each env\", function () {",
							"  if (resList && resList.length > 1) {",
							"    const oidcFilter = resList.filter(e => e.name === 'openid');",
							"    pm.expect(oidcFilter).to.be.an('array').and.have.lengthOf(1);",
							"    pm.environment.set(\"openidResourceID\", oidcFilter[0].id);",
							"    console.log(\"openidResourceID is now: \" + pm.environment.get(\"openidResourceID\"));",
							"",
							"    const platFilter = resList.filter(e => e.name.toLowerCase().includes('pingone'));",
							"    pm.expect(platFilter).to.be.an('array').and.have.lengthOf(1);",
							"    pm.environment.set(\"p1ResID\", platFilter[0].id);",
							"    console.log(\"p1ResID is now: \" + pm.environment.get(\"p1ResID\"));",
							"  } else {",
							"    console.log(\"Problem finding default resources\");",
							"    pm.expect.fail();",
							"  }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{jwtToken}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					}
				],
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/resources",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"resources"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 3: Get all OIDC Scopes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body JSON's _embedded:scopes is an array of objs w/ IDs\", function() {",
							"    const jsonData = pm.response.json();",
							"    const scopeList = jsonData._embedded.scopes;",
							"    pm.expect(scopeList).to.be.an('array');",
							"    if (scopeList.length > 0) {",
							"        console.log(\"Found \" + scopeList.length + \" Scope(s)\");",
							"        scopeList.forEach((elem) => {",
							"            pm.expect(elem.id).to.be.a('string');",
							"        });",
							"        pm.environment.set(\"oidcProfileID\", scopeList[0].id);",
							"        console.log(\"oidcProfileID is now: \" + pm.environment.get(\"oidcProfileID\"));",
							"    } else {",
							"        console.log(\"No Scopes!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/resources/{{openidResourceID}}/scopes",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"resources",
						"{{openidResourceID}}",
						"scopes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 4: Assign a resource grant to the web application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{jwtToken}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n    \t\"id\" : \"{{openidResourceID}}\"\n    },\n    \"scopes\": [{\n    \t\"id\" : \"{{oidcProfileID}}\"\n    }]\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/applications/{{webApp4MfaId}}/grants",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"applications",
						"{{webApp4MfaId}}",
						"grants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 5: Create a sign-on policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"mfaSignonPolicyID\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"MFA_UseCasePolicy_{{$timestamp}}\",\n  \"default\": \"false\",\n  \"description\": \"A new MFA sign-on policy.\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/signOnPolicies",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"signOnPolicies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 6: Create an SMS MFA sign-on policy action",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"mfaSMSActionID\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"priority\": 5,\n  \"type\": \"MULTI_FACTOR_AUTHENTICATION\",\n  \"sms\": {\n    \"enabled\": true\n  },\n  \"email\": {\n    \"enabled\": false\n  }\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/signOnPolicies/{{mfaSignonPolicyID}}/actions",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"signOnPolicies",
						"{{mfaSignonPolicyID}}",
						"actions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 7: Create an Email MFA sign-on policy action",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"mfaEmailActionID\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"priority\": 10,\n  \"type\": \"MULTI_FACTOR_AUTHENTICATION\",\n  \"sms\": {\n    \"enabled\": false\n  },\n  \"email\": {\n    \"enabled\": true\n  }\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/signOnPolicies/{{mfaSignonPolicyID}}/actions",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"signOnPolicies",
						"{{mfaSignonPolicyID}}",
						"actions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 8: Assign the sign-on policy to the web application",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"priority\": 10,\n  \"signOnPolicy\": {\n  \t\"id\": \"{{mfaSignonPolicyID}}\"\n  }\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/applications/{{webApp4MfaId}}/signOnPolicyAssignments",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"applications",
						"{{webApp4MfaId}}",
						"signOnPolicyAssignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 9: Create a population for MFA users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body JSON contains name and id strings\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.be.a('string');",
							"    pm.expect(jsonData.id).to.be.a('string');",
							"    pm.environment.set(\"MFAPopID\", jsonData.id);",
							"    console.log(\"MFAPopID is now: \" + pm.environment.get(\"MFAPopID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"MFAPopulation_{{$timestamp}}\",\n    \"description\": \"Population for MFA users\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/populations",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"populations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 10: Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body JSON contains createdAt username and id strings\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.createdAt).to.be.a('string');",
							"    pm.expect(jsonData.username).to.be.a('string');",
							"    pm.expect(jsonData.id).to.be.a('string');",
							"    pm.environment.set(\"MFAUserID\", jsonData.id);",
							"    pm.environment.set(\"MFAUsername\", jsonData.username);",
							"    console.log(\"MFAUserID is now: \" + pm.environment.get(\"MFAUserID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email}}\",\n    \"name\": {\n        \"given\": \"Test\",\n        \"family\": \"MFAUser\"\n    },\n    \"population\": {\n        \"id\": \"{{MFAPopID}}\"\n    },\n    \"username\": \"MFA_user_{{$timestamp}}\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/users",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 11: Set user password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.pingidentity.password.set+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"value\": \"{{userPassword}}\",\n  \"forceChange\": false\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/users/{{MFAUserID}}/password",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"users",
						"{{MFAUserID}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 12: Enable user MFA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mfaEnabled\": true\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/users/{{MFAUserID}}/mfaEnabled",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"users",
						"{{MFAUserID}}",
						"mfaEnabled"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 13: Set user device (SMS)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body JSON contains createdAt and id strings\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.createdAt).to.be.a('string');",
							"    pm.expect(jsonData.id).to.be.a('string');",
							"    pm.environment.set(\"mfaSmsDeviceID\", jsonData.id);",
							"    console.log(\"mfaSmsDeviceID is now: \" + pm.environment.get(\"mfaSmsDeviceID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"SMS\",\n    \"phone\": \"{{phone}}\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/users/{{MFAUserID}}/devices",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"users",
						"{{MFAUserID}}",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 14: Set user device (Email)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body JSON contains createdAt and id strings\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.createdAt).to.be.a('string');",
							"    pm.expect(jsonData.id).to.be.a('string');",
							"    pm.environment.set(\"mfaEmailDeviceID\", jsonData.id);",
							"    console.log(\"mfaEmailDeviceID is now: \" + pm.environment.get(\"mfaEmailDeviceID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"EMAIL\",\n    \"email\": \"{{email}}\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/users/{{MFAUserID}}/devices",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"users",
						"{{MFAUserID}}",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 15: Send an authorization request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const url = require('url');",
							"const querystring = require('querystring');",
							"",
							"console.log(\"<---------------Response info:\");",
							"pm.test(\"Status code is 302\", function () {",
							"  pm.response.to.have.status(302);",
							"});",
							"",
							"const loc = url.parse(pm.response.headers.get(\"Location\"));",
							"var params = {};",
							"if (loc.hash) {",
							"  params = querystring.parse(loc.hash.substring(1));",
							"} else {",
							"  params = querystring.parse(loc.query);",
							"}",
							"",
							"pm.test(\"Location header contains a 'flowId', an auth 'code', or an 'access_token' and/or 'id_token'\", function () {",
							"  if (params.flowId) {",
							"    pm.expect(params.flowId).to.be.a('string');",
							"    pm.environment.set('flowID', params.flowId);",
							"    console.log(\"flowID is now: \" + pm.environment.get(\"flowID\"));",
							"  } else if (params.code) {",
							"    if (pm.environment.get(\"expectState\") === \"true\") {",
							"      if (params.state) {",
							"        pm.expect(params.state).to.equal(pm.variables.get(\"state\"));",
							"      } else {",
							"        console.log(\"Could not find state in Location header value.\");",
							"        pm.expect.fail(\"Could not find state in Location header value.\");",
							"      }",
							"    } else if (params.state) {",
							"      console.log(\"Unexpected state in Location header value.\");",
							"      pm.expect.fail(\"Unexpected state in Location header value.\");",
							"    }",
							"    pm.expect(params.code).to.be.a('string');",
							"    pm.environment.set(\"authCode\", params.code);",
							"    console.log(\"authCode is set\");",
							"  } else if (params.access_token || params.id_token) {",
							"    if (pm.environment.get(\"expectState\") === \"true\") {",
							"      if (params.state) {",
							"        pm.expect(params.state).to.equal(pm.variables.get(\"state\"));",
							"      } else {",
							"        console.log(\"Could not find state in Location header value.\");",
							"        pm.expect.fail(\"Could not find state in Location header value.\");",
							"      }",
							"    } else if (params.state) {",
							"      console.log(\"Unexpected state in Location header value.\");",
							"      pm.expect.fail(\"Unexpected state in Location header value.\");",
							"    }",
							"    if (params.access_token) {",
							"      pm.expect(params.access_token).to.be.a('string');",
							"      pm.environment.set(\"oauthToken\", params.access_token);",
							"      console.log(\"oauthToken is set\");",
							"    }",
							"    if (params.id_token) {",
							"      pm.expect(params.id_token).to.be.a('string');",
							"      pm.environment.set(\"idToken\", params.id_token);",
							"      console.log(\"idToken is set\");",
							"    }",
							"  } else if (params.error) {",
							"    console.log(\"An error occurred!\");",
							"    console.log(\"Error: \" + params.error);",
							"    if (params.error_description) {",
							"      console.log(\"Error description: \" + params.error_description);",
							"    }",
							"    pm.expect.fail(\"Location header contains an error.\");",
							"  } else {",
							"    console.log(\"Could not find flowId, access/id_token, or error in Location header value.\");",
							"    console.log(\"Location: \" + pm.response.headers.get(\"Location\"));",
							"    pm.expect.fail(\"Could not find flowId, access/id_token, or error in Location header value.\");",
							"  }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{authPath}}/{{envID}}/as/authorize?response_type=code&client_id={{webApp4MfaId}}&redirect_uri=https://www.google.com",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"as",
						"authorize"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code",
							"description": "Required"
						},
						{
							"key": "client_id",
							"value": "{{webApp4MfaId}}",
							"description": "Required"
						},
						{
							"key": "redirect_uri",
							"value": "https://www.google.com",
							"description": "Required "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 16: Get the flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 17: Sign on with a username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.pingidentity.user.lookup+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{MFAUsername}}\"\n}"
				},
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 18: Check OTP for SMS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.pingidentity.otp.check+json"
					},
					{
						"description": "Use this for localhost",
						"key": "Cookie",
						"value": "ST={{sessionToken}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"otp\": \"xxxxxx\"\n}"
				},
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 19: Check OTP for Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.pingidentity.otp.check+json"
					},
					{
						"description": "Use this for localhost",
						"key": "Cookie",
						"value": "ST={{sessionToken}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"otp\": \"xxxxxx\"\n}"
				},
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 20: Call the resume endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const url = require('url');",
							"const querystring = require('querystring');",
							"const Cookie = require('postman-collection').Cookie;",
							"",
							"pm.test(\"Status code is 302\", function () {",
							"  pm.response.to.have.status(302);",
							"});",
							"",
							"const loc = url.parse(pm.response.headers.get(\"Location\"));",
							"var params = {};",
							"if (loc.hash) {",
							"  params = querystring.parse(loc.hash.substring(1));",
							"} else {",
							"  params = querystring.parse(loc.query);",
							"}",
							"",
							"pm.test(\"Location header contains an 'access_token' and/or 'id_token', or a 'code'\", function () {",
							"  if (params.access_token || params.id_token) {",
							"    if (params.access_token) {",
							"      pm.expect(params.access_token).to.be.a('string');",
							"      pm.environment.set(\"oauthToken\", params.access_token);",
							"      console.log(\"oauthToken is set\");",
							"    }",
							"    if (params.id_token) {",
							"      pm.expect(params.id_token).to.be.a('string');",
							"      pm.environment.set(\"idToken\", params.id_token);",
							"      console.log(\"idToken is set\");",
							"    }",
							"  } else if (params.code) {",
							"    pm.expect(params.code).to.be.a('string');",
							"    pm.environment.set(\"authCode\", params.code);",
							"    console.log(\"authCode is set\");",
							"  } else if (params.error) {",
							"    console.log(\"An error occurred: \");",
							"    console.log(\"Error: \" + params.error);",
							"    if (params.error_description) {",
							"      console.log(\"Error description: \" + params.error_description);",
							"    }",
							"    pm.expect.fail();",
							"  } else {",
							"    console.log(\"Could not find access token, ID token, or error in Location header value.\");",
							"    console.log(\"Location: \" + pm.response.headers.get(\"Location\"));",
							"    pm.expect.fail();",
							"  }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "ST={{sessionToken}}",
						"disabled": true
					},
					{
						"description": "Used for browsers that improperly handle SameSite=None",
						"key": "Cookie",
						"type": "text",
						"value": "ST-NO-SS={{sessionToken}}",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{authPath}}/{{envID}}/as/resume?flowId={{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"as",
						"resume"
					],
					"query": [
						{
							"key": "flowId",
							"value": "{{flowID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 21: Get the application secret",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"MFAAppSecret\", jsonData.secret);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}"
					}
				],
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/applications/{{webApp4MfaId}}/secret",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"applications",
						"{{webApp4MfaId}}",
						"secret"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 22: Get the access token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body JSON contains an access_token string\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token).to.be.a('string');",
							"    pm.environment.set(\"accessToken\", jsonData.access_token);",
							"    console.log(\"accessToken is set\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{MFAAppSecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{webApp4MfaId}}",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"description": "Required",
							"type": "text"
						},
						{
							"key": "code",
							"value": "{{authCode}}",
							"description": "Required",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "https://www.google.com",
							"description": "Required",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{authPath}}/{{envID}}/as/token",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"as",
						"token"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}