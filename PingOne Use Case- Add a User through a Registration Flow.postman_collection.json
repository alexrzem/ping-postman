{
	"info": {
		"_postman_id": "48e20f5e-0e29-4fe0-ab00-e5af225278e4",
		"name": "PingOne Use Case: Add a User through a Registration Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Step 1: Create an application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"RegistrationAppID\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"RegistrationApp_{{$timestamp}}\",\n  \"enabled\": true,\n  \"type\": \"WEB_APP\",\n  \"protocol\": \"OPENID_CONNECT\",\n  \"responseTypes\": [\n    \"CODE\"\n  ],\n  \"grantTypes\": [\n    \"AUTHORIZATION_CODE\"\n  ],\n  \"tokenEndpointAuthMethod\": \"CLIENT_SECRET_BASIC\",\n  \"postLogoutRedirectUris\": [\n    \"https://www.example.com\"\n  ],\n  \"redirectUris\": [\n      \"https://www.example.com\"\n      ]\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/applications",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 2: Create a population for registered users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body JSON contains name and id strings\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.be.a('string');",
							"    pm.expect(jsonData.id).to.be.a('string');",
							"    pm.environment.set(\"registrationPopID\", jsonData.id);",
							"    console.log(\"registrationPopID is now: \" + pm.environment.get(\"registrationPopID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{jwtToken}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"ProgressiveProfilePopulation_{{$timestamp}}\",\n    \"description\": \"Population for progressive profile users\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/populations",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"populations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 3: Create the new sign-on policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"registrationPolicyID\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Registration_UseCase_Sign-onPolicy_{{$timestamp}}\",\n  \"default\": \"false\",\n  \"description\": \"A new sign-on policy with registration enabled.\"\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/signOnPolicies",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"signOnPolicies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 4: Create the sign-on policy action with registration enabled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"registrationPolicyActionID\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{jwtToken}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"priority\": 10,\n    \"type\": \"LOGIN\",\n    \"registration\" : {\n      \"enabled\" : true,\n      \"population\" : {\n        \"id\" : \"{{registrationPopID}}\"\n      }\n    }\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/signOnPolicies/{{registrationPolicyID}}/actions",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"signOnPolicies",
						"{{registrationPolicyID}}",
						"actions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 5: Assign the sign-on policy to an application",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"registrationPolicyAssignmentID\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{bearerToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"priority\": 1,\n  \"signOnPolicy\": {\n  \t\"id\": \"{{registrationPolicyID}}\"\n  }\n}"
				},
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/applications/{{RegistrationAppID}}/signOnPolicyAssignments",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"applications",
						"{{RegistrationAppID}}",
						"signOnPolicyAssignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 6: Send the authorization request",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const url = require('url');",
							"const querystring = require('querystring');",
							"const Cookie = require('postman-collection').Cookie;",
							"",
							"console.log(\"--------------->Request info:\");",
							"const requestParams = querystring.parse(pm.request.url.query.toString());",
							"if (requestParams.state) {",
							"  console.log(\"state was: \" + requestParams.state);",
							"  pm.environment.set(\"expectState\", \"true\");",
							"} else {",
							"  console.log(\"No state!\");",
							"  pm.environment.set(\"expectState\", \"false\");",
							"}",
							"if (requestParams.nonce) {",
							"  console.log(\"nonce was: \" + requestParams.nonce);",
							"} else {",
							"  console.log(\"No nonce!\");",
							"}",
							"if (requestParams.code_challenge) {",
							"  console.log(\"code_challenge was: \" + requestParams.code_challenge);",
							"  console.log(\"code_verifier is now: \" + pm.environment.get(\"codeVerifier\"));",
							"} else {",
							"  console.log(\"No code_challenge!\");",
							"}",
							"var isPiFlow;",
							"if (requestParams.response_mode && requestParams.response_mode === \"pi.flow\") {",
							"  isPiFlow = true;",
							"  pm.environment.set(\"piFlowMode\", \"true\");",
							"} else {",
							"  isPiFlow = false;",
							"  pm.environment.set(\"piFlowMode\", \"false\");",
							"}",
							"console.log(\"pi.flow request: \" + isPiFlow);",
							"",
							"console.log(\"<---------------Response info:\");",
							"if (isPiFlow) {",
							"  pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  });",
							"",
							"  pm.test(\"Response contains a 'status', as well as expected info for that status\", function () {",
							"    const jsonData = pm.response.json();",
							"    const flowStatus = jsonData.status;",
							"    if (flowStatus) {",
							"      pm.expect(flowStatus).to.be.a('string');",
							"      console.log(\"Flow status is \" + flowStatus);",
							"      switch (flowStatus) {",
							"        case \"COMPLETED\":",
							"          const authorizeResponse = jsonData.authorizeResponse;",
							"          pm.expect(authorizeResponse).to.be.an('object');",
							"          if (pm.environment.get(\"expectState\") === \"true\") {",
							"            if (authorizeResponse.state) {",
							"              pm.expect(authorizeResponse.state).to.equal(pm.variables.get(\"state\"));",
							"            } else {",
							"              console.log(\"Could not find state in Location header value.\");",
							"              pm.expect.fail(\"Could not find state in Location header value.\");",
							"            }",
							"          } else if (authorizeResponse.state) {",
							"            console.log(\"Unexpected state in Location header value.\");",
							"            pm.expect.fail(\"Unexpected state in Location header value.\");",
							"          }",
							"          if (authorizeResponse.code) {",
							"            pm.expect(authorizeResponse.code).to.be.a('string');",
							"            pm.environment.set(\"authCode\", authorizeResponse.code);",
							"            console.log(\"authCode is set\");",
							"          } else if (authorizeResponse.access_token || authorizeResponse.id_token) {",
							"            if (authorizeResponse.access_token) {",
							"              pm.expect(authorizeResponse.access_token).to.be.a('string');",
							"              pm.environment.set(\"oauthToken\", authorizeResponse.access_token);",
							"              console.log(\"oauthToken is set\");",
							"            }",
							"            if (authorizeResponse.id_token) {",
							"              pm.expect(authorizeResponse.id_token).to.be.a('string');",
							"              pm.environment.set(\"idToken\", authorizeResponse.id_token);",
							"              console.log(\"idToken is set\");",
							"            }",
							"          }",
							"          break;",
							"        case \"FAILED\":",
							"          const flowError = jsonData.error;",
							"          pm.expect(flowError).to.be.an('object');",
							"          console.log(\"An error occurred: \");",
							"          console.log(JSON.stringify(flowError));",
							"          pm.expect.fail(\"Flow FAILED.\");",
							"          break;",
							"        default:",
							"          pm.expect(jsonData.id).to.be.a('string');",
							"          pm.environment.set('flowID', jsonData.id);",
							"          console.log(\"flowID is now: \" + pm.environment.get(\"flowID\"));",
							"      }",
							"    } else {",
							"      const errorDetails = jsonData.details;",
							"      pm.expect(errorDetails).to.be.an('array');",
							"      console.log(\"An error occurred: \");",
							"      console.log(JSON.stringify(errorDetails[0]));",
							"    }",
							"  });",
							"} else {",
							"  pm.test(\"Status code is 302\", function () {",
							"    pm.response.to.have.status(302);",
							"  });",
							"",
							"  const loc = url.parse(pm.response.headers.get(\"Location\"));",
							"  var params = {};",
							"  if (loc.hash) {",
							"    params = querystring.parse(loc.hash.substring(1));",
							"  } else {",
							"    params = querystring.parse(loc.query);",
							"  }",
							"",
							"  pm.test(\"Location header contains a 'flowId', an auth 'code', or an 'access_token' and/or 'id_token'\", function () {",
							"    if (params.flowId) {",
							"      pm.expect(params.flowId).to.be.a('string');",
							"      pm.environment.set('flowID', params.flowId);",
							"      console.log(\"flowID is now: \" + pm.environment.get(\"flowID\"));",
							"    } else if (params.code) {",
							"      if (pm.environment.get(\"expectState\") === \"true\") {",
							"        if (params.state) {",
							"          pm.expect(params.state).to.equal(pm.variables.get(\"state\"));",
							"        } else {",
							"          console.log(\"Could not find state in Location header value.\");",
							"          pm.expect.fail(\"Could not find state in Location header value.\");",
							"        }",
							"      } else if (params.state) {",
							"        console.log(\"Unexpected state in Location header value.\");",
							"        pm.expect.fail(\"Unexpected state in Location header value.\");",
							"      }",
							"      pm.expect(params.code).to.be.a('string');",
							"      pm.environment.set(\"authCode\", params.code);",
							"      console.log(\"authCode is set\");",
							"    } else if (params.access_token || params.id_token) {",
							"      if (pm.environment.get(\"expectState\") === \"true\") {",
							"        if (params.state) {",
							"          pm.expect(params.state).to.equal(pm.variables.get(\"state\"));",
							"        } else {",
							"          console.log(\"Could not find state in Location header value.\");",
							"          pm.expect.fail(\"Could not find state in Location header value.\");",
							"        }",
							"      } else if (params.state) {",
							"        console.log(\"Unexpected state in Location header value.\");",
							"        pm.expect.fail(\"Unexpected state in Location header value.\");",
							"      }",
							"      if (params.access_token) {",
							"        pm.expect(params.access_token).to.be.a('string');",
							"        pm.environment.set(\"oauthToken\", params.access_token);",
							"        console.log(\"oauthToken is set\");",
							"      }",
							"      if (params.id_token) {",
							"        pm.expect(params.id_token).to.be.a('string');",
							"        pm.environment.set(\"idToken\", params.id_token);",
							"        console.log(\"idToken is set\");",
							"      }",
							"    } else if (params.error) {",
							"      console.log(\"An error occurred!\");",
							"      console.log(\"Error: \" + params.error);",
							"      if (params.error_description) {",
							"        console.log(\"Error description: \" + params.error_description);",
							"      }",
							"      pm.expect.fail(\"Location header contains an error.\");",
							"    } else {",
							"      console.log(\"Could not find flowId, access/id_token, or error in Location header value.\");",
							"      console.log(\"Location: \" + pm.response.headers.get(\"Location\"));",
							"      pm.expect.fail(\"Could not find flowId, access/id_token, or error in Location header value.\");",
							"    }",
							"  });",
							"}",
							"",
							"pm.test(\"If session cookie is sent it is 'httpOnly'\", function () {",
							"  const sessionCookie = new Cookie(pm.response.headers.get(\"Set-Cookie\"));",
							"  if (sessionCookie.value) {",
							"    // Check 'httpOnly' flag is set",
							"    pm.expect(sessionCookie.httpOnly).to.be.true;",
							"    // Store value of ST",
							"    pm.environment.set('sessionToken', sessionCookie.value);",
							"    console.log(\"sessionToken is now: \" + pm.environment.get(\"sessionToken\"));",
							"  } else {",
							"    console.log(\"Session Token not updated.\");",
							"  }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{authPath}}/{{envID}}/as/authorize?response_type=code&redirect_uri=https://www.example.com&scope=openid profile&client_id={{RegistrationAppID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"as",
						"authorize"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code",
							"description": "Required"
						},
						{
							"key": "max_age",
							"value": "3600",
							"description": "Optional - uses seconds",
							"disabled": true
						},
						{
							"key": "redirect_uri",
							"value": "https://www.example.com"
						},
						{
							"key": "scope",
							"value": "openid profile"
						},
						{
							"key": "login_hint",
							"value": "username",
							"disabled": true
						},
						{
							"key": "client_id",
							"value": "{{RegistrationAppID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 7: Get the flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "ST={{sessionToken}}",
						"description": "Use this for localhost",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 8: Register a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const Cookie = require('postman-collection').Cookie;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Flow status is VERIFICATION_CODE_REQUIRED\", function () {",
							"  const jsonData = pm.response.json();",
							"  pm.expect(jsonData.status).to.be.a('string');",
							"  console.log(\"Flow status is \" + jsonData.status);",
							"  pm.expect(jsonData.status).to.eql('VERIFICATION_CODE_REQUIRED');",
							"});",
							"",
							"pm.test(\"If session cookie is sent it is 'httpOnly'\", function () {",
							"  const sessionCookie = new Cookie(pm.response.headers.get(\"Set-Cookie\"));",
							"  if (sessionCookie.value) {",
							"    // Check 'httpOnly' flag is set",
							"    pm.expect(sessionCookie.httpOnly).to.be.true;",
							"    // Store value of ST",
							"    pm.environment.set('sessionToken', sessionCookie.value);",
							"    console.log(\"sessionToken is now: \" + pm.environment.get(\"sessionToken\"));",
							"  } else {",
							"    console.log(\"Session Token not updated.\");",
							"  }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.pingidentity.user.register+json"
					},
					{
						"description": "Use this for localhost",
						"key": "Cookie",
						"value": "ST={{sessionToken}}",
						"disabled": true
					},
					{
						"description": "Used for browsers that improperly handle SameSite=None",
						"key": "Cookie",
						"type": "text",
						"value": "ST-NO-SS={{sessionToken}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"registered-user_{{$timestamp}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 9: Verify user",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const Cookie = require('postman-collection').Cookie;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body JSON has a status string\", function () {",
							"  const jsonData = pm.response.json();",
							"  pm.expect(jsonData.status).to.be.a('string');",
							"  console.log(\"Flow status is \" + jsonData.status);",
							"});",
							"",
							"pm.test(\"If session cookie is sent it is 'httpOnly'\", function () {",
							"  const sessionCookie = new Cookie(pm.response.headers.get(\"Set-Cookie\"));",
							"  if (sessionCookie.value) {",
							"    // Check 'httpOnly' flag is set",
							"    pm.expect(sessionCookie.httpOnly).to.be.true;",
							"    // Store value of ST",
							"    pm.environment.set('sessionToken', sessionCookie.value);",
							"    console.log(\"sessionToken is now: \" + pm.environment.get(\"sessionToken\"));",
							"  } else {",
							"    console.log(\"Session Token not updated.\");",
							"  }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.pingidentity.user.verify+json"
					},
					{
						"description": "Use this for localhost",
						"key": "Cookie",
						"value": "ST={{sessionToken}}",
						"disabled": true
					},
					{
						"description": "Used for browsers that improperly handle SameSite=None",
						"key": "Cookie",
						"type": "text",
						"value": "ST-NO-SS={{sessionToken}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"verificationCode\": \"xxxxxx\"\n}"
				},
				"url": {
					"raw": "{{authPath}}/{{envID}}/flows/{{flowID}}",
					"host": [
						"{{authPath}}"
					],
					"path": [
						"{{envID}}",
						"flows",
						"{{flowID}}"
					]
				},
				"description": "\n"
			},
			"response": []
		},
		{
			"name": "Step 10: Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiPath}}/environments/{{envID}}/users",
					"host": [
						"{{apiPath}}"
					],
					"path": [
						"environments",
						"{{envID}}",
						"users"
					]
				}
			},
			"response": []
		}
	]
}